//Problem 1

// Problem 2
const N = 3
range P = 1..2 //thread identities
range C = 0..N //counter range for lock

RECURSIVE_LOCK = (acquire[p:P] -> LOCKED[p][0]),
LOCKED[p:P][i:C] = (when (i<N) acquire[p] -> LOCKED[p][i+1]
			| when (i>0) release[p] -> LOCKED[p][i-1]
			| when (i==0) release[p] -> RECURSIVE_LOCK).

//Problem 3

const N = 2
range T = 1..N

TERMINAL = (seat[i:T].query -> CHOOSING[i]),
CHOOSING[i:T] = ( return -> TERMINAL | seat[i].acquire -> choose[i] -> seat[i].reserve -> seat[i].release -> TERMINAL).

SEAT = (query -> SEAT 
		| reserve -> BOOKED),
BOOKED = (unreserve -> SEAT).

LOCK = (acquire -> release -> LOCK).

||CONCERTHALL = ({a,b}:TERMINAL || {a,b}::(seat[T]:SEAT) || {a,b}::(seat[T]:LOCK)).