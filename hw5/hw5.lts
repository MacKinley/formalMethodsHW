// 5-1
SQUARE = SQUARE[7],
SQUARE[0] = (north -> STOP
             |east -> SQUARE[1]),
SQUARE[1] = (east -> SQUARE[2]
             |west -> SQUARE[0]
             |south -> SQUARE[4]),
SQUARE[2] = (west -> SQUARE[1]
             |south -> SQUARE[5]),
SQUARE[3] = (east -> SQUARE[4]
             |south -> SQUARE[6]),
SQUARE[4] = (north -> SQUARE[1]
             |west -> SQUARE[3]),
SQUARE[5] = (north -> SQUARE[2]
             |south -> SQUARE[8]),
SQUARE[6] = (north -> SQUARE[3]),
SQUARE[7] = (east -> SQUARE[8]),
SQUARE[8] = (north -> SQUARE[5]
             |west -> SQUARE[7]).

// 5-2
PHIL = (think->enter->left.pickup->right.pickup->eat
		->left.putdown->right.putdown->leave->PHIL).

CHOP = (pickup->putdown->CHOP).

ROOM(LIMIT=4) = ROOM[LIMIT],
ROOM[i:0..LIMIT] = (when(i>0) enter->ROOM[i-1]
					| leave->ROOM[i+1]).

||DININGPHILS = (p[i:1..5]:PHIL
		||forall[i:1..5]({p[i].left,p[i%5+1].right}::CHOP)
		||p[1..5]::ROOM(4)).

// 5-3
//	(a)Trace to property violation in PS:
//		b
//		a
//		b
//		b

//	(b)
TEST = (b->S2|a->S1),
S1 = ({a,b}->TEST),
S2 = (b->ERROR|a->TEST).

// 5-4
const M = 4

SEMAPHORE(S=0) = SEMAPHORE[S],
SEMAPHORE[s:0..M]=(when (s>0) p -> SEMAPHORE[s-1] | v -> SEMAPHORE[s+1]).

CARPARKCONTROL = ( empty.p -> arrive -> full.v -> CARPARKCONTROL
                  	| full.p -> depart -> empty.v -> CARPARKCONTROL).

ARRIVALS=(arrive->ARRIVALS).
DEPARTURES=(depart->DEPARTURES).

||CARPARK=(ARRIVALS || CARPARKCONTROL || DEPARTURES || empty::SEMAPHORE(M)||full::SEMAPHORE(0)).
property OVERLOAD(LIMIT=4)=OVERLOAD[0].
||CHECK_SAFETY2=(CARPARK||OVERLOAD1(4)).

// 5-5
FLAG = STATUS[0], // 0 Lowered, 1 Raised
STATUS[i:0..1] = (raise -> STATUS[1]
                  | lower -> STATUS[0]
                  | check[i] -> STATUS[i]).

||FLAGS = (flag1:FLAG || flag2:FLAG).

NEIGHBOR1 = (flag1.raise -> (flag2.check[0] -> neighbor1.pick -> flag1.lower-> NEIGHBOR1 
                             | flag2.check[1] -> flag1.lower -> NEIGHBOR1)).

NEIGHBOR2 = (flag2.raise -> (flag1.check[0] -> neighbor2.pick -> flag2.lower-> NEIGHBOR2
                             | flag1.check[1] -> flag2.lower -> NEIGHBOR2)).

property MUTEX = (flag2.check[0]-> neighbor1.pick -> MUTEX
                  | flag1.check[0]-> neighbor2.pick -> MUTEX).

progress N1_PICK = {neighbor1.pick}
progress N2_PICK = {neighbor2.pick}

||WARRING_NEIGHBORS = (NEIGHBOR1 || NEIGHBOR2 || FLAGS).
||CHECK_SAFETY3 = (WARRING_NEIGHBORS || MUTEX).

