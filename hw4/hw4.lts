//Question 1
//a)
ONEBUF=(put->get->ONEBUF).

PRODUCER = (put->PRODUCER).

CONSUMER = (get->CONSUMER).

||ONEBUF_USERS = (p[1..3]:PRODUCER || ONEBUF || c[1..4]:CONSUMER) /{p[1..3].put/put, c[1..4].get/get}.

//b)
SEMAPHORE(s:) = SEMAPHORE[S], 
SEMAPHORE[s:0..1] = (when(s>0) p -> SEMAPHORE[s-1] | v -> SEMAPHORE[s+1]).

ONEBUF=(empty.p -> put -> full.v -> ONEBUF
        | full.p -> get -> empty.v -> ONEBUF).

PRODUCER = (put -> PRODUCER).
CONSUMER = (get -> CONSUMER).

||ONEBUF_USERS = (p[1..3]:PRODUCER || ONEBUF ||c[1..4]:CONSUMER || 
						empty::SEMAPHORE(1) || full::SEMAPHORE(0))
                  		/{p[1..3].put/put, c[1..4].get/get}.

//Question 2
//a)
const M = 4

SEMAPHORE(S=0) = SEMAPHORE[S],
SEMAPHORE[s:0..M]=(when (s>0) p -> SEMAPHORE[s-1] | v -> SEMAPHORE[s+1]).

CARPARKCONTROL = ( empty.p -> arrive -> full.v -> CARPARKCONTROL
                  	| full.p -> depart -> empty.v -> CARPARKCONTROL).

ARRIVALS=(arrive->ARRIVALS).
DEPARTURES=(depart->DEPARTURES).

||CARPARK=(ARRIVALS || CARPARKCONTROL || DEPARTURES || empty::SEMAPHORE(M)||full::SEMAPHORE(0)).

//b)
TEST = TEST[0],
TEST[i:-1..M+1] = (arrive -> TEST[i+1]
					| depart -> TEST[i-1]
					| when(i>M || i<0) error -> ERROR).

||TEST_CARPARK=(CARPARK||TEST).

// Question 3
POT(M=3) = POT[M],
POT[i:0..M] = (when (i>0) getserving -> POT[i-1]
               | when (i==0) fillpot -> POT[M]).

SAVAGE = (getserving -> SAVAGE).
COOK = (fillpot -> COOK).

||DINING_SAVAGES = (savage[0..2]:SAVAGE || COOK || POT(5)) /{savage[0..2].getserving/getserving}.

//Question 4
const N = 10
range R = 0..N

SAVINGSACCOUNT = SAVINGSACCOUNT[0],
SAVINGSACCOUNT[i:R] = (when (i<N) deposit[a:0..N-i] -> SAVINGSACCOUNT[i+a]
                       | when (i>0) withdraw[a:0..i] -> SAVINGSACCOUNT[i-a]).

CUSTOMER = (withdraw[i:R] -> CUSTOMER 
			| deposit[i:R] -> CUSTOMER).

||ACCOUNT_CUSTOMER = (cust[0..2]:CUSTOMER || cust[0..2]::SAVINGSACCOUNT).

